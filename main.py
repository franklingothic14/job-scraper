import os
import requests
from bs4 import BeautifulSoup
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import asyncio

BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN environment variable is not set!")

sent_links = set()
HEADERS = {"User-Agent": "Mozilla/5.0"}

async def fetch_jobs_stepstone():
    url = "https://www.stepstone.de/jobs/motion-designer/in-deutschland"
    resp = requests.get(url, headers=HEADERS)
    soup = BeautifulSoup(resp.text, 'html.parser')
    jobs = []
    # –®—É–∫–∞—î–º–æ –≤—Å—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤–∞–∫–∞–Ω—Å—ñ—ó –≤ —Å–ø–∏—Å–∫—É
    for a in soup.select('a.JobCardStyled_link__1Zd4Z'):  # –ø—Ä–∏–∫–ª–∞–¥ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –¥–ª—è –ø–æ—Å–∏–ª–∞–Ω—å –≤–∞–∫–∞–Ω—Å—ñ–π
        link = a.get('href')
        if not link:
            continue
        if not link.startswith('http'):
            link = "https://www.stepstone.de" + link
        if link in sent_links:
            continue
        title = a.get_text(strip=True)
        # –î–ª—è –∫–æ–º–ø–∞–Ω—ñ—ó —ñ –ª–æ–∫–∞—Ü—ñ—ó —Ä–æ–±–∏–º–æ –∑–∞–ø–∏—Ç –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –≤–∞–∫–∞–Ω—Å—ñ—ó
        try:
            job_resp = requests.get(link, headers=HEADERS)
            job_soup = BeautifulSoup(job_resp.text, 'html.parser')
            company = job_soup.select_one('div.JobDetailsCompany_name__2fQ3E')  # –ø—Ä–∏–∫–ª–∞–¥
            company = company.get_text(strip=True) if company else 'N/A'
            location = job_soup.select_one('span.JobDetailsLocation_location__1u5uK')
            location = location.get_text(strip=True) if location else 'N/A'
            description = job_soup.select_one('div.JobDetails_description__3f1nB')
            description = description.get_text(separator=' ', strip=True)[:300] if description else 'No description'
        except Exception:
            company = 'N/A'
            location = 'N/A'
            description = 'No description'

        jobs.append({
            'title': title,
            'company': company,
            'location': location,
            'description': description,
            'link': link
        })
        if len(jobs) >= 5:
            break
        await asyncio.sleep(0.5)
    return jobs

async def fetch_jobs_bundesagentur():
    url = "https://www.arbeitsagentur.de/jobsuche/suche?was=motion+designer&wo=Deutschland"
    resp = requests.get(url, headers=HEADERS)
    soup = BeautifulSoup(resp.text, 'html.parser')
    jobs = []
    # –ù–∞ —Ü—å–æ–º—É —Å–∞–π—Ç—ñ —à—É–∫–∞—î–º–æ –≤–∞–∫–∞–Ω—Å—ñ—ó –∑–∞ —Ç–µ–≥–æ–º <a> –∑ –∫–ª–∞—Å–æ–º job-title
    for a in soup.select('a.job-title'):
        link = a.get('href')
        if not link:
            continue
        if not link.startswith('http'):
            link = "https://www.arbeitsagentur.de" + link
        if link in sent_links:
            continue
        title = a.get_text(strip=True)
        # –õ–æ–∫–∞—Ü—ñ—è
        parent = a.find_parent('div', class_='job-card')
        location = 'N/A'
        if parent:
            loc_span = parent.select_one('span.job-location')
            if loc_span:
                location = loc_span.get_text(strip=True)
        # –û–ø–∏—Å –∑ –æ–∫—Ä–µ–º–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        try:
            job_resp = requests.get(link, headers=HEADERS)
            job_soup = BeautifulSoup(job_resp.text, 'html.parser')
            description = job_soup.select_one('div.job-description')
            description = description.get_text(separator=' ', strip=True)[:300] if description else 'No description'
        except Exception:
            description = 'No description'

        jobs.append({
            'title': title,
            'company': 'N/A',
            'location': location,
            'description': description,
            'link': link
        })
        if len(jobs) >= 5:
            break
        await asyncio.sleep(0.5)
    return jobs

def format_message(job):
    return (
        f"üìù *{job['title']}*\n"
        f"üè¢ Company: {job['company']}\n"
        f"üìç Location: {job['location']}\n"
        f"üíº Work format: Remote / Office (check job link)\n"
        f"üó£ Language: English or German (check job link)\n"
        f"üí∞ Compensation: Not specified\n"
        f"üìÑ Description: {job['description']}\n"
        f"üîó [Job link]({job['link']})"
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ—à—É–∫—É –≤–∞–∫–∞–Ω—Å—ñ–π Motion Designer —É –ù—ñ–º–µ—á—á–∏–Ω—ñ.\n"
        "–í–≤–µ–¥–∏ /search –¥–ª—è –ø–æ—à—É–∫—É –≤–∞–∫–∞–Ω—Å—ñ–π."
    )

async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–®—É–∫–∞—é –≤–∞–∫–∞–Ω—Å—ñ—ó...")
    jobs = []
    try:
        jobs += await fetch_jobs_stepstone()
    except Exception as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ StepStone: {e}")
    try:
        jobs += await fetch_jobs_bundesagentur()
    except Exception as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ Bundesagentur: {e}")

    if not jobs:
        await update.message.reply_text("–í–∞–∫–∞–Ω—Å—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –∞–±–æ –≤—Å—ñ –≤–∂–µ –±—É–ª–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ.")
        return

    count = 0
    for job in jobs:
        if count >= 5:
            break
        await update.message.reply_markdown(format_message(job))
        sent_links.add(job['link'])
        count += 1
        await asyncio.sleep(0.5)

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("search", search))
    app.run_polling()

if __name__ == '__main__':
    main()
